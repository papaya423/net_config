# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ac_config.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# -*- coding: utf-8 -*-
import os
import struct
import time

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# SPDX-License-Identifier: GPL-2.0-or-later
from PyQt5 import QtCore
from PyQt5.QtCore import pyqtSignal, QObject, QSize,Qt,QCoreApplication
from PyQt5.QtGui import QColor, QFont, QPalette
from PyQt5.QtWidgets import QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QSizePolicy, QGridLayout, QLabel, QSlider, \
    QComboBox, QColorDialog, QCheckBox, QLineEdit, QButtonGroup, QRadioButton, QFileDialog, QMessageBox, QTextEdit, \
    QTreeWidget, QTreeWidgetItem
from PyQt5.QtGui import QColor,QImage,QPixmap
from basic_editor import BasicEditor
from Send_alarm import SendAlarm
from PIL import Image
import cv2
import re
tr = QCoreApplication.translate


class BasicHandler(QObject):
    update = pyqtSignal()

    def __init__(self, container):
        super().__init__()
        self.device  = None
        self.widgets = []

    def set_device(self, device):
        self.device = device
        if self.valid():
            # self.keyboard = self.device.keyboard
            self.show()
        else:
            self.hide()

    def show(self):
        for w in self.widgets:
            w.show()

    def hide(self):
        for w in self.widgets:
            w.hide()

    def block_signals(self):
        for w in self.widgets:
            w.blockSignals(True)

    def unblock_signals(self):
        for w in self.widgets:
            w.blockSignals(False)

class NetConfigSetHandler(BasicHandler):

    def __init__(self, container):
        super().__init__(container)

    def valid(self):
        return 1
        # return isinstance(self.device, VialKeyboard) #and self.device.keyboard.lighting_qmk_rgblight

    def send_cmd(self,strmsg):
        byte_array = strmsg.encode()
        print(type(byte_array),len(byte_array))  # <class 'bytes'>
        print(byte_array)  #
        #hex_data = byte_array.hex()
        return 0


    def send_cmd_str(self,strmsg):
        byte_array = strmsg.encode()
        print(type(byte_array),len(byte_array))  # <class 'bytes'>
        print(byte_array)  #
        try:
            return 0
        except:
            return None
    def send_cmd_hex(self,byte_array):
        #bytes_array是bytes,入参要转换为bytes传入进来
        ret =0
        return ret

    def recv_cmd_hex(self):
        ret = 0 #self.device.keyboard.recv_custom_setting()
        return ret


class switch_config(BasicEditor):
    def __init__(self):
        super().__init__()
        self.data = dict()
        self.mode = 1

        w = QWidget()
        w.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)
        self.container = QVBoxLayout()

        w.setLayout(self.container)
        self.addWidget(w)
        self.setupUi(w,self.container)
        self.handlers = [NetConfigSetHandler(self.container)]


    def setupUi(self,Form,contain):

        # self.label = QLabel("按钮")
        self.testButton = QPushButton("查看配置")

        self.testButton.clicked.connect(self.on_btn_test_clicked)
        self.treedata = QTreeWidget()
        self.treedata.setFixedWidth(600)
        self.treedata .setColumnCount(2)
        self.treedata .setHeaderLabels(['Key', 'Value'])
        # self.setCentralWidget(self.treedata )

        self.lineEdit = QTextEdit()
        self.lineEdit.setFixedWidth(600)

        # print(retstr)
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.addWidget(self.treedata)
        self.horizontalLayout.addWidget(self.lineEdit)
        self.horizontalLayout.setStretch(1,1)
        self.horizontalLayout.setStretch(1, 2)
        # self.horizontalLayout.addWidget(self.label)
        self.layout1 = QHBoxLayout()
        self.btn_dhcp= QPushButton("DHCP")
        self.dhcp_inputIp = QLineEdit()
        dhcp_tool_tip='''
        按如下方式命令配置设备：
        system-view
        dhcp enable
        interface Vlanif10
        dhcp select global
        ip pool xc
        network 192.168.37.0 mask 255.255.255.0
        dns-list 8.8.8.8 8.8.4.4
        quit
        quit
        '''
        self.btn_dhcp.setToolTip(dhcp_tool_tip)
        self.btn_dhcp.clicked.connect(self.on_btn_dhcp_clicked)
        self.layout1.addWidget(self.btn_dhcp)
        self.layout1.addWidget(self.dhcp_inputIp)


        self.btn_stp = QPushButton("STP")
        self.btn_stp.clicked.connect(self.on_btn_stp_clicked)
        self.layout1.addWidget(self.btn_stp)

        self.btn_acl= QPushButton("ACL")
        self.btn_acl.clicked.connect(self.on_btn_acl_clicked)
        self.layout1.addWidget(self.btn_acl)

        self.btn_vrrp= QPushButton("VRRP")
        self.btn_vrrp.clicked.connect(self.on_btn_vrrp_clicked)
        self.layout1.addWidget(self.btn_vrrp)

        self.btn_vlan= QPushButton("VLAN")
        self.btn_vlan.clicked.connect(self.on_btn_vlan_clicked)
        self.layout1.addWidget(self.btn_vlan)

        self.btn_ospf= QPushButton("OSPF")
        self.btn_ospf.clicked.connect(self.on_btn_ospf_clicked)
        self.layout1.addWidget(self.btn_ospf)

        self.layout2 = QHBoxLayout()
        self.lbl_vlan = QLabel("VLAN Id")
        self.lineedit_vlan = QLineEdit()
        self.lineedit_vlan.setText("99")
        self.lineedit_vlan.setFixedWidth(300)
        self.btn_vlan= QPushButton("添加VLAN")
        self.btn_vlan.clicked.connect(self.on_btn_vlan_clicked)
        self.layout2.addWidget(self.lbl_vlan)
        self.layout2.addWidget(self.lineedit_vlan)
        self.layout2.addWidget(self.btn_vlan)
        self.layout2.addStretch()

        self.layoutn= QHBoxLayout()
        self.layoutn.addWidget(self.testButton)
        self.layoutn.addStretch()

        contain.addLayout(self.layout1)
        contain.addLayout(self.layout2)
        contain.addLayout(self.horizontalLayout)
        contain.addLayout(self.layoutn)

    def on_btn_dhcp_clicked(self):
        print("dhcp")
        ip_str =self.dhcp_inputIp.text()
        print(ip_str)
        self.device.execute_some_command("system-view")
        self.device.execute_some_command("dhcp enable")  # 开启DHCP功能
        self.device.execute_some_command("interface Vlanif10")  # 进入VLANIF 10接口
        self.device.execute_some_command("dhcp select global")  # 选择全局地址池
        self.device.execute_some_command("ip pool xc")  # 创建名为xc的地址池
        # net_str=f"network {ip_str} mask 255.255.255.0"
        self.device.execute_some_command(f"network {ip_str} mask 255.255.255.0")
        # self.device.execute_some_command("network 192.168.37.0 mask 255.255.255.0")  # 定义网络地址和子网掩码
        self.device.execute_some_command("gateway-list 192.168.37.254")  # 设置默认网关
        self.device.execute_some_command("dns-list 8.8.8.8 8.8.4.4")  # 设置DNS服务器
        self.device.execute_some_command("quit")  # 退出地址池配置模式
        self.device.execute_some_command("quit") #退出系统视图模式

    def on_btn_stp_clicked(self):
        print("stp")
        self.device.execute_some_command("system-view")
        self.device.execute_some_command("stp enable")  # 开启STP服务
        self.device.execute_some_command("stp mode stp")  # STP模式为STP
        self.device.execute_some_command("stp root primary") #设置当前设备为生成树协议的根桥
        self.device.execute_some_command("display stp brief") #查看stp的简要信息
        self.device.execute_some_command("quit")

    def on_btn_vlan_clicked(self):
        print("vlan")
        self.device.execute_some_command("system-view")
        self.device.execute_some_command("vlan 10")
        self.device.execute_some_command("quit")
        # self.device.execute_some_command("interface Vlanif10")
        # self.device.execute_some_command("ip add 192.168.37.100 255.255.255.0")
        # self.device.execute_some_command("quit")
        self.device.execute_some_command("int g0/0/1")
        self.device.execute_some_command("port link-type access")
        self.device.execute_some_command("port default vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("int g0/0/2")
        self.device.execute_some_command("port link-type access")
        self.device.execute_some_command("port default vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("display vlan")
        self.device.execute_some_command("display ip interface brief")
        self.device.execute_some_command("display ip routing-table")
        # 完善vlan相关命令

    def on_btn_acl_clicked(self):
        print("acl")
        self.device.execute_some_command("system-view")# 进入系统视图模式
        self.device.execute_some_command("acl number 2000")  # 创建ACL 2000
        self.device.execute_some_command("rule permit source 192.168.37.0 0.0.0.255")  # 添加允许规则
        self.device.execute_some_command("interface GigabitEthernet0/0/1")  # 进入接口GigabitEthernet0/0/1
        self.device.execute_some_command("traffic-filter inbound acl 2000")  # 在接口上应用ACL
        self.device.execute_some_command("quit") #退出接口模式
        self.device.execute_some_command("quit") #退出系统视图模式

    def on_btn_vrrp_clicked(self):
        print("vrrp")
        self.device.execute_some_command("system-view")
        self.device.execute_some_command("vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("int g0/0/1")
        self.device.execute_some_command("port link-type access")
        self.device.execute_some_command("port default vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("int g0/0/2")
        self.device.execute_some_command("port link-type access")
        self.device.execute_some_command("port default vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("interface Vlanif 10")
        self.device.execute_some_command("vrrp vrid 1 virtual-ip 192.168.37.102")
        self.device.execute_some_command("vrrp vrid 1 priority 150")
        self.device.execute_some_command("vrrp vrid 1 preempt-mode timer delay 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("display vrrp")
        #添加相关代码

    def on_btn_ospf_clicked(self):
        print("ospf")
        self.device.execute_some_command("system-view")
        self.device.execute_some_command("vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("int g0/0/1")
        self.device.execute_some_command("port link-type access")
        self.device.execute_some_command("port default vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("int g0/0/2")
        self.device.execute_some_command("port link-type access")
        self.device.execute_some_command("port default vlan 10")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("ospf 1")
        self.device.execute_some_command("area 0")
        self.device.execute_some_command("network 192.168.37.0 0.0.0.255")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("quit")
        self.device.execute_some_command("display ospf peer")
        self.device.execute_some_command("display ospf interface")
        self.device.execute_some_command("display ospf routing")
        self.device.execute_some_command("display ospf brief")
        # 添加相关代码
    def parse_data(self,config_str):
        config_dict = {}
        current_key = None
        current_sub_dict = None
        if config_str is None:
            return

        lines = config_str.split('\n')
        for line in lines:
            line = line.strip()

            # Skip comments and empty lines
            if not line or line.startswith('#'):
                continue

                # Handle nested structures like interfaces
            if line.endswith('{'):
                current_key = line[:-1].strip()
                current_sub_dict = {}
                config_dict[current_key] = current_sub_dict
            elif line.startswith('}'):
                current_key = None
                current_sub_dict = None
            else:
                # Split the line into key and value
                if ' ' in line:
                    key, value = line.split(' ', 1)
                    key = key.strip()
                    value = value.strip()
                else:
                    key = line.strip()
                    value = None

                if key in config_dict.keys():
                    current_sub_dict={}
                    valuetemp= config_dict[key]
                    if isinstance(valuetemp, list):
                        values = valuetemp+[value]
                    else:
                        values = [valuetemp,value]
                    config_dict[key] = values
                    # Handle nested keys
                # if current_sub_dict:
                #     current_sub_dict[key] = value
                #     # config_dict[key] = values
                else:
                    config_dict[key] = value

                    # Post-process to handle interfaces with configurations
        interface_pattern = re.compile(r'^interface\s+(\S+)')
        ip_address_pattern = re.compile(r'^ip\s+address\s+(\S+)\s+(\S+)')
        for key, value in list(config_dict.items()):
            if isinstance(value, dict):
                # Extract interface details
                match = interface_pattern.match(key)
                if match:
                    interface_name = match.group(1)
                    # Look for IP address configuration in the sub-dict
                    for sub_key, sub_value in value.items():
                        if isinstance(sub_value, dict):
                            ip_match = ip_address_pattern.match(' '.join(sub_value.keys()))
                            if ip_match:
                                ip_address = ip_match.group(1)
                                subnet_mask = ip_match.group(2)
                                # Update the dictionary structure
                                config_dict[interface_name] = {
                                    'type': 'interface',
                                    'ip_address': ip_address,
                                    'subnet_mask': subnet_mask,
                                    # Keep other configurations if any
                                    'config': {k: v for k, v in sub_value.items() if k not in ['ip address']}
                                }
                                # Remove the old interface entry
                                del config_dict[key]
                                break
        return self.flatten_dict(config_dict)
                                # Flatten the dictionary (remove empty nested dicts)

    def flatten_dict(self,d, parent_key='', sep='.'):
        items = []
        for k, v in d.items():
            new_key = f"{parent_key}{sep}{k}" if parent_key else k
            if isinstance(v, dict):
                items.extend(self.flatten_dict(v, new_key, sep=sep).items())
            else:
                items.append((new_key, v))
        return dict(items)

    def on_btn_test_clicked(self):
        # 查看配置disp cu
        #在该函数下添加你想要做的操作代码
        # self.device.execute_some_command("quit")
        retstr= self.device.execute_some_command("disp cu")
        self.lineEdit.setText(retstr)
        result =self.parse_data(retstr)
        print(result)

        self.add_dict_to_tree(self.treedata, result)

    def add_dict_to_tree(self, tree, data):
        if data is None:
            print("data is null")
            return
        for key, value in data.items():
            item = QTreeWidgetItem([key, str(value)])
            if isinstance(value, dict):
                self.add_dict_to_tree(tree, value)
            else:
                item.setFlags(item.flags() ^ 2)  # 去掉可编辑的标志
            tree.addTopLevelItem(item)
 # layout 移除所有控件
    def remove_all_controls(self,layout):
        while layout.count():
            child = layout.takeAt(0)
            if child is not None:
                if child.widget() is not None:
                    child.widget().deleteLater()
                elif child.layout() is not None:
                    self.clear_layout(child.layout())

    def clear_layout(self,layout):
        while layout is not None and layout.count():
            item = layout.takeAt(0)
            widget = item.widget()
            if widget is not None:
                widget.deleteLater()
            else:
                self.clear_layout(item.layout())



    def valid(self):
        # return isinstance(self.device, VialKeyboard)
        return 1

    def rebuild(self, device):
        super().rebuild(device)

        for h in self.handlers:
            h.set_device(device)

        if not self.valid():
            return
        # if len(device.kmapcustom):
        #     print(device.kmapcustom)

